---
title: Continuous Delivery for Java with CloudBees Jenkins Enterprise
owner: London Services
---

## Introduction
This is a guide on how to use CloudBees Jenkins Enterprise for [Pivotal Cloud Foundry&reg;](https://network.pivotal.io/products/pivotal-cf) (PCF) and integrate with your Cloud Foundry installation.

This guide covers the following topics:

1. Cloning an application from Github
2. Building your Java application
5. Pushing your application to Cloud Foundry Elastic Runtime

## Create the Initial Build Job

* Navigate to the Jenkins Home and access the folder belonging to your user or organization.

* Click `new item`, give it a name, and select `Build a Maven project`. Click `OK`.

* Under `Source Code Management`, select `Git`, and supply your repository URL and credentials. 
This guide uses the Spring PetClinic Application as an example. 
You can find the Spring PetClinic Application at `https://github.com/CloudBees-community/spring-petclinic.git`

<%= image_tag("../images/cd-cf-github.png") %>

* Under `Build Triggers`, select `Build when a change is pushed to GitHub`.

* Under `Build Environment`, check `Set up Cloud Foundry CLI`.
  * **API EndPoint**: Use `api.your-cf-installation.com/`
  * **Skip SSL Validation**: Check this.
  * **API Credentials**: Select your PCF/UAA Credentials. Note that Cloud Foundry CLI credentials can only be configured at 
  the folder-level. See the [credentials](#credentials] section of this topic for more details.
  * **Organization**: Use the organization that you belong to on PCF.
  * **Space**: Use the space in your organization where you want to deploy the application.

## <a id="cf-cli"></a>cf CLI Configuration Section

<%= image_tag("../images/cd-cf-cli.png") %>

* In the Build section, insert `package` as goal.

* Under `Post Steps`, add an `Execute Shell` post-build step and insert `cf push APP-NAME -p PATH-TO-APP`. 
Replace `APP-NAME` with the name of your application.
Replace `PATH-TO-APP` with the local path to your application, including the application itself.
In our example, we use insert the following: `cf push petclinic -p target/petclinic.war`

<%= image_tag("../images/cd-cf-build.png") %>

* Save the configuration. Click ``Build Now'' to run the build.

### Managing the Deployed Application

After executing the job, the application is deployed in your Elastic Runtime environment (`https://console.your-cf-installation.com/`), 
in the organization and space that you defined in the [cf CLI](#cf-cli) configuration section.

### Elastic Runtime Console

<%= image_tag("../images/cd-cf-elastic-1.png") %>

From the Pivotal Cloud Foundry&reg; Elastic Runtime Console Page, you can scale, manage, and monitor your application.

<%= image_tag("../images/cd-cf-elastic.png") %>

### Github Set Up

Both the Github plugin and git are already installed in your Jenkins instance. 
You must only specify the URL of the project that you want to build and deploy, and the GitHub credentials to use, if any.
For our example, no GitHub credentials are needed.

Note: You can only specify credentials at the folder level.

###<a id="credentials"></a> Credentials Set Up

Only Administrators can create global credentials.
For this reason, the `Add` Credentials Button in the job configuration page is disabled to users.
A user can still create credentials at the folder level, for example, in any of the job parent folders.
Follow the step below to create credentials at the folder level:

* Access the folder where you want to configure the credentials, for example, the CloudBees folder. Click `Configure`.

<%= image_tag("../images/folder-configuration.png") %>

* In the Credentials section, click `Add Credentials`, and configure the desired credentials.

<%= image_tag("../images/folder-credentials.png") %>

The credentials that you configure at this level are accessible by all of the jobs created in any of the child-folders of 
the current one.
